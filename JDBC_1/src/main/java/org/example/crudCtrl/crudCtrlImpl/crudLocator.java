package org.example.crudCtrl.crudCtrlImpl;import org.example.crudCtrl.crudCtrl;import org.example.dao.daoImpl.LocatorDAO;import org.example.entity.Locator;import java.text.SimpleDateFormat;import java.util.List;import java.util.Optional;import java.util.Scanner;public class crudLocator implements crudCtrl {    LocatorDAO locatorDao = new LocatorDAO();    Scanner sc = new Scanner(System.in);    @Override    public void insert() {        try {            Locator locator = new Locator();            locator.input(sc);            locatorDao.create(locator);        } catch (Exception e) {            System.out.println("Lựa chọn không hợp lệ. Vui lòng chọn lại.");        }    }    @Override    public void delete() {        try {            Scanner sc = new Scanner(System.in);            System.out.print("Nhập ID Locator muốn xóa: ");            int id = sc.nextInt();            Optional<Locator> locator = locatorDao.findById(id);            if (locator.isPresent()) {                locatorDao.delete(id);                System.out.println("Xóa locator thành công.");            } else {                System.out.println("Locator không tồn tại.");            }        } catch (Exception e) {            System.out.println("Lựa chọn không hợp lệ. Vui lòng chọn lại.");        }    }    @Override    public void update() {        try {            System.out.print("Nhập ID locator cần cập nhật: ");            int id = sc.nextInt();            sc.nextLine();            Optional<Locator> locator = locatorDao.findById(id);            if (locator.isPresent()) {                locator.get().input(sc);                locatorDao.update(locator.get());            } else {                System.out.println("Locator không tồn tại");            }        } catch (Exception e) {            System.out.println("Lựa chọn không hợp lệ. Vui lòng thử lại.");        }    }    @Override    public void read() {        List<Locator> list = locatorDao.findAll();        if (list.isEmpty()) {            System.out.println("Không tìm thấy Locator.");            return;        }        // Header of the table        System.out.printf("%-5s %-20s %-10s %-10s %-10s %-10s %-15s %-15s %-30s\n",                "ID", "Name", "Active", "X", "Y", "Z", "Created By", "Created", "Warehouse ID");        System.out.println(                "------------------------------------------------------------------------------------------------------------------------");        // Data rows        for (Locator locator : list) {            System.out.printf("%-5d %-20s %-10b %-10s %-10s %-10s %-15s %-15s %-30s\n",                    locator.getId(),                    locator.getName(),                    locator.isActive(),                    locator.getX(),                    locator.getY(),                    locator.getZ(),                    locator.getCreatedBy(),                    (locator.getCreated() != null) ? new SimpleDateFormat("dd-MM-yyyy").format(locator.getCreated()) : "N/A",                    locator.getWarehouseId()            );        }    }    public void sort(String sort) {        if(sort.equals("asc")){            List<Locator> list = locatorDao.sortListAsc();             System.out.printf("%-5s %-20s %-10s %-10s %-10s %-10s %-15s %-15s %-30s\n",                        "ID", "Name", "Active", "X", "Y", "Z", "Created By", "Created", "Warehouse ID");                System.out.println(                        "------------------------------------------------------------------------------------------------------------------------");                for (Locator locator : list) {                    System.out.printf("%-5d %-20s %-10b %-10d %-10d %-10d %-15s %-15s %-30d\n",                            locator.getId(),                            locator.getName(),                            locator.isActive(),                            locator.getX(),                            locator.getY(),                            locator.getZ(),                            locator.getCreatedBy(),                            (locator.getCreated() != null) ? new SimpleDateFormat("dd-MM-yyyy").format(locator.getCreated()) : "N/A",                            locator.getWarehouseId()                    );                }        }        else if(sort.equals("desc")){            List<Locator> list = locatorDao.sortListDesc();             System.out.printf("%-5s %-20s %-10s %-10s %-10s %-10s %-15s %-15s %-30s\n",                        "ID", "Name", "Active", "X", "Y", "Z", "Created By", "Created", "Warehouse ID");                System.out.println(                        "------------------------------------------------------------------------------------------------------------------------");                for (Locator locator : list) {                    System.out.printf("%-5d %-20s %-10b %-10d %-10d %-10d %-15s %-15s %-30d\n",                            locator.getId(),                            locator.getName(),                            locator.isActive(),                            locator.getX(),                            locator.getY(),                            locator.getZ(),                            locator.getCreatedBy(),                            (locator.getCreated() != null) ? new SimpleDateFormat("dd-MM-yyyy").format(locator.getCreated()) : "N/A",                            locator.getWarehouseId()                    );                }        }    }    public void findByName() {        try {            Scanner sc = new Scanner(System.in);            System.out.print("Nhập tên Locator cần tìm: ");            String name = sc.nextLine();            List<Locator> list = locatorDao.findByName(name);            if (list != null) {                System.out.printf("%-5s %-20s %-10s %-10s %-10s %-10s %-15s %-15s %-30s\n",                        "ID", "Name", "Active", "X", "Y", "Z", "Created By", "Created", "Warehouse ID");                System.out.println(                        "------------------------------------------------------------------------------------------------------------------------");                for (Locator locator : list) {                    System.out.printf("%-5d %-20s %-10b %-10d %-10d %-10d %-15s %-15s %-30d\n",                            locator.getId(),                            locator.getName(),                            locator.isActive(),                            locator.getX(),                            locator.getY(),                            locator.getZ(),                            locator.getCreatedBy(),                            (locator.getCreated() != null) ? new SimpleDateFormat("dd-MM-yyyy").format(locator.getCreated()) : "N/A",                            locator.getWarehouseId()                    );                }            } else {                System.out.println("Locator không tồn tại.");            }        } catch (Exception e) {            System.out.println("Lựa chọn không hợp lệ. Vui lòng thử lại.");        }    }}