package org.example.dao.daoImpl;import org.example.dao.CRUDOperations;import org.example.entity.Warehouse;import org.example.utils.Helper;import java.sql.*;import java.util.ArrayList;import java.util.List;import java.util.Optional;public class WarehouseDAO implements CRUDOperations<Warehouse> {    private static final String SELECT_ALL_WAREHOUSE_SQL = "SELECT * FROM warehouse";    private static final String SELECT_WAREHOUSE_BY_ID_SQL = "SELECT * FROM warehouse WHERE id = ?";    private static final String SELECT_WAREHOUSE_BY_NAME_SQL = "SELECT * FROM warehouse WHERE name LIKE ?";    private static final String INSERT_WAREHOUSE_SQL = "INSERT INTO warehouse (name, is_active, description, " +            "created_by, created) VALUES (?, ?, ?, ?, ?)";    private static final String UPDATE_WAREHOUSE_SQL = "UPDATE warehouse SET name = ?, is_active = ?, description = ?, " +            "created_by = ?, created = ? WHERE id = ?";    private static final String DELETE_WAREHOUSE_SQL = "DELETE FROM warehouse WHERE id = ?";    @Override    public void create(Warehouse warehouse) {        try (Connection connection = Helper.getConnection();             PreparedStatement preparedStatement = connection.prepareStatement(INSERT_WAREHOUSE_SQL)) {            preparedStatement.setString(1, warehouse.getName());            preparedStatement.setBoolean(2, warehouse.getActive());            preparedStatement.setString(3, warehouse.getDescription());            preparedStatement.setString(4, warehouse.getCreatedBy());            preparedStatement.setTimestamp(5, Timestamp.valueOf(warehouse.getCreated()));            preparedStatement.executeUpdate();        } catch (SQLException e) {            e.printStackTrace();        }    }    @Override    public List<Warehouse> findAll() {        List<Warehouse> warehouses = new ArrayList<>();        try (Connection connection = Helper.getConnection();             PreparedStatement preparedStatement = connection.prepareStatement(SELECT_ALL_WAREHOUSE_SQL);             ResultSet rs = preparedStatement.executeQuery()) {            while (rs.next()) {                Warehouse warehouse = new Warehouse();                warehouse.setId(rs.getInt("id"));                warehouse.setName(rs.getString("name"));                warehouse.setActive(rs.getBoolean("is_active"));                warehouse.setDescription(rs.getString("description"));                warehouse.setCreatedBy(rs.getString("created_by"));                warehouse.setCreated(rs.getTimestamp("created").toLocalDateTime());                warehouses.add(warehouse);            }        } catch (SQLException e) {            e.printStackTrace();        }        return warehouses;    }    @Override    public Optional<Warehouse> findById(int id) {        Warehouse warehouse = null;        try (Connection connection = Helper.getConnection();             PreparedStatement preparedStatement = connection.prepareStatement(SELECT_WAREHOUSE_BY_ID_SQL)) {            preparedStatement.setInt(1, id);            ResultSet rs = preparedStatement.executeQuery();            if (rs.next()) {                warehouse = new Warehouse();                warehouse.setId(rs.getInt("id"));                warehouse.setName(rs.getString("name"));                warehouse.setActive(rs.getBoolean("is_active"));                warehouse.setDescription(rs.getString("description"));                warehouse.setCreatedBy(rs.getString("created_by"));                warehouse.setCreated(rs.getTimestamp("created").toLocalDateTime());            }        } catch (SQLException e) {            e.printStackTrace();        }        return Optional.ofNullable(warehouse);    }    @Override    public List<Warehouse> findByName(String name) {        List<Warehouse> warehouses = new ArrayList<>();        try (Connection connection = Helper.getConnection();             PreparedStatement preparedStatement = connection.prepareStatement(SELECT_WAREHOUSE_BY_NAME_SQL)) {            preparedStatement.setString(1, "%" + name + "%");            ResultSet rs = preparedStatement.executeQuery();            while (rs.next()) {                Warehouse warehouse = new Warehouse();                warehouse.setId(rs.getInt("id"));                warehouse.setName(rs.getString("name"));                warehouse.setActive(rs.getBoolean("is_active"));                warehouse.setDescription(rs.getString("description"));                warehouse.setCreatedBy(rs.getString("created_by"));                warehouse.setCreated(rs.getTimestamp("created").toLocalDateTime());                warehouses.add(warehouse);            }        } catch (SQLException e) {            e.printStackTrace();        }        return warehouses;    }    @Override    public Optional<Warehouse> findByNameOnly(String name) {        return Optional.empty();    }    @Override    public void update(Warehouse warehouse) {        try (Connection connection = Helper.getConnection();             PreparedStatement preparedStatement = connection.prepareStatement(UPDATE_WAREHOUSE_SQL)) {            preparedStatement.setString(1, warehouse.getName());            preparedStatement.setBoolean(2, warehouse.getActive());            preparedStatement.setString(3, warehouse.getDescription());            preparedStatement.setString(4, warehouse.getCreatedBy());            preparedStatement.setTimestamp(5, Timestamp.valueOf(warehouse.getCreated()));            preparedStatement.setInt(6, warehouse.getId());            preparedStatement.executeUpdate();        } catch (SQLException e) {            e.printStackTrace();        }    }    @Override    public void delete(int id) {        try (Connection connection = Helper.getConnection();             PreparedStatement preparedStatement = connection.prepareStatement(DELETE_WAREHOUSE_SQL)) {            preparedStatement.setInt(1, id);            preparedStatement.executeUpdate();        } catch (SQLException e) {            e.printStackTrace();        }    }}