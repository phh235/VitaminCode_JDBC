package org.example.dao.daoImpl;import org.example.dao.CRUD;import org.example.entity.ProductItem;import org.example.utils.Helper;import org.example.utils.ProductType;import java.sql.ResultSet;import java.util.ArrayList;import java.util.List;import java.util.Optional;public class ProductItemDAO implements CRUD<ProductItem> {    private static final String SELECT_ALL_PRODUCT_ITEM = "SELECT * FROM product WHERE product_type = ?";    private static final String INSERT_PRODUCT_ITEM = "INSERT INTO product (name, is_active, locator_id, create_by, " +            "qty_stock, product_type, product_parent_id) VALUES (?, ?, ?, ?, ?, ?, ?)";    private static final String UPDATE_PRODUCT_ITEM = "UPDATE product SET name = ?, is_active = ?, locator_id = ?, " +            "created = ?, create_by = ?, qty_stock = ?, product_parent_id = ? WHERE id = ?";    private static final String DELETE_PRODUCT_ITEM = "DELETE FROM product WHERE id = ? AND product_type = ?";    private static final String SELECT_BY_ID = "SELECT * FROM product WHERE id = ?";    private static final String SELECT_PRODUCT_ITEM_BY_ID = "SELECT * FROM product WHERE product_parent_id = ?";    private static final String SELECT_PRODUCTS_ITEM_ASC = "SELECT * FROM product WHERE product_type = ? ORDER BY " +            "qty_stock ASC";    private static final String SELECT_PRODUCTS_ITEM_DESC = "SELECT * FROM product WHERE product_type = ? ORDER BY " +            "qty_stock DESC";    @Override    public void create(ProductItem productItem) {        try {            Helper.executeUpdate(INSERT_PRODUCT_ITEM,                    productItem.getName(),                    productItem.getActive(),                    productItem.getLocatorId(),                    productItem.getCreatedBy(),                    productItem.getQtyStock(),                    productItem.getProductType().name(),                    productItem.getProductParentId()            );            System.out.println("Thêm sản phẩm loại ITEM thành công");        } catch (Exception e) {            System.out.println("Thêm sản phẩm loại ITEM thất bại");            e.printStackTrace();        }    }    @Override    public List<ProductItem> findAll() {        List<ProductItem> list = new ArrayList<>();        try {            ResultSet rs = Helper.executeQuery(SELECT_ALL_PRODUCT_ITEM,                    ProductType.ITEM.toString());            while (rs.next()) {                ProductItem productCombo = new ProductItem();                productCombo.setId(rs.getInt("id"));                productCombo.setName(rs.getString("name"));                productCombo.setActive(rs.getBoolean("is_active"));                productCombo.setLocatorId(rs.getInt("locator_id"));                productCombo.setCreated(rs.getTimestamp("created"));                productCombo.setCreatedBy(rs.getString("created_by"));                productCombo.setQtyStock(rs.getInt("qty_stock"));                productCombo.setProductParentId(rs.getInt("product_parent_id"));                list.add(productCombo);            }        } catch (Exception e) {            e.printStackTrace();        }        return list;    }    @Override    public Optional<ProductItem> findById(int id) {        ProductItem item = null;        try {            ResultSet rs = Helper.executeQuery(SELECT_BY_ID, id);            if (rs.next()) {                item = new ProductItem();                item.setId(rs.getInt("id"));                item.setName(rs.getString("name"));                item.setActive(rs.getBoolean("is_active"));                item.setLocatorId(rs.getInt("locator_id"));                item.setCreated(rs.getTimestamp("created"));                item.setQtyStock(rs.getInt("qty_stock"));                item.setProductType(ProductType.valueOf(rs.getString("product_type")));                item.setProductParentId(rs.getInt("product_parent_id"));            }        } catch (Exception e) {            e.printStackTrace();        }        return Optional.ofNullable(item);    }    public List<ProductItem> getItemById(int id) {        List<ProductItem> list = new ArrayList<>();        try {            ResultSet rs = Helper.executeQuery(SELECT_PRODUCT_ITEM_BY_ID,                    id            );            while (rs.next()) {                ProductItem item = new ProductItem();                item.setId(rs.getInt("id"));                item.setName(rs.getString("name"));                item.setActive(rs.getBoolean("is_active"));                item.setLocatorId(rs.getInt("locator_id"));                item.setCreated(rs.getTimestamp("created"));                item.setQtyStock(rs.getInt("qty_stock"));                item.setProductType(ProductType.valueOf(rs.getString("product_type")));                item.setProductParentId(rs.getInt("product_parent_id"));                list.add(item);            }        } catch (Exception e) {            e.printStackTrace();        }        return list;    }    @Override    public void update(ProductItem productCombo) {        try {            Helper.executeUpdate(UPDATE_PRODUCT_ITEM,                    productCombo.getName(),                    productCombo.getActive(),                    productCombo.getLocatorId(),                    productCombo.getCreated(),                    productCombo.getCreatedBy(),                    productCombo.getQtyStock(),                    productCombo.getProductParentId(),                    productCombo.getId(),                    productCombo.getProductType().name()            );            System.out.println("Cập nhật sản phẩm loại ITEM thành công");        } catch (Exception e) {            System.out.println("Cập nhật sản phẩm loại ITEM thất bại");            e.printStackTrace();        }    }    @Override    public void delete(int id) {        try {            Optional<ProductItem> optionalCombo = findById(id);            if (optionalCombo.isPresent()) {                ProductItem item = optionalCombo.get();                if (item.getProductType() == ProductType.COMBO) {                    System.out.println("Không thể xóa sản phẩm loại COMBO: " + id);                    return;                }                Helper.executeUpdate(DELETE_PRODUCT_ITEM, id);                System.out.println("Xóa sản phẩm thành công: " + id);            } else {                System.out.println("Không tìm thấy ID sản phẩm: " + id);            }        } catch (Exception e) {            System.out.println("Xóa sản phẩm thất bại");            e.printStackTrace();        }    }    public List<ProductItem> getItemSortAsc() {        List<ProductItem> list = new ArrayList<>();        try {            ResultSet rs = Helper.executeQuery(SELECT_PRODUCTS_ITEM_ASC,                    ProductType.ITEM.toString()            );            while (rs.next()) {                ProductItem item = new ProductItem();                item.setId(rs.getInt("id"));                item.setName(rs.getString("name"));                item.setActive(rs.getBoolean("is_active"));                item.setLocatorId(rs.getInt("locator_id"));                item.setCreated(rs.getTimestamp("created"));                item.setQtyStock(rs.getInt("qty_stock"));                item.setProductType(ProductType.valueOf(rs.getString("product_type")));                item.setProductParentId(rs.getInt("product_parent_id"));                list.add(item);            }        } catch (Exception e) {            e.printStackTrace();        }        return list;    }    public List<ProductItem> getItemSortDesc() {        List<ProductItem> list = new ArrayList<>();        try {            ResultSet rs = Helper.executeQuery(SELECT_PRODUCTS_ITEM_DESC,                    ProductType.ITEM.toString()            );            while (rs.next()) {                ProductItem item = new ProductItem();                item.setId(rs.getInt("id"));                item.setName(rs.getString("name"));                item.setActive(rs.getBoolean("is_active"));                item.setLocatorId(rs.getInt("locator_id"));                item.setCreated(rs.getTimestamp("created"));                item.setQtyStock(rs.getInt("qty_stock"));                item.setProductType(ProductType.valueOf(rs.getString("product_type")));                item.setProductParentId(rs.getInt("product_parent_id"));                list.add(item);            }        } catch (Exception e) {            e.printStackTrace();        }        return list;    }}