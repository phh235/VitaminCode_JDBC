package org.example.dao.daoImpl;import org.example.dao.CRUD;import org.example.entity.Locator;import org.example.utils.Helper;import java.sql.*;import java.util.ArrayList;import java.util.List;import java.util.Optional;public class LocatorDAO implements CRUD<Locator> {    private static final String SELECT_ALL_LOCATOR_SQL = "SELECT id, name, is_active, x, y, z, created_by, created, warehouse_id FROM locator";    private static final String SELECT_LOCATOR_BY_ID_SQL = "SELECT id, name, is_active, x, y, z, created_by, created, warehouse_id FROM locator WHERE id = ?";    private static final String SELECT_LOCATOR_BY_NAME_SQL = "SELECT id, name, is_active, x, y, z, created_by, created, warehouse_id FROM locator WHERE name = ?";    private static final String INSERT_LOCATOR_SQL = "INSERT INTO locator (name, is_active, x, y, z, created_by, warehouse_id) VALUES (?, ?, ?, ?, ?, ?, ?)";    private static final String UPDATE_LOCATOR_SQL = "UPDATE locator SET name = ?, is_active = ?, x = ?, y = ?, z = ?, created_by = ?, created = ?, warehouse_id = ? WHERE id = ?";    private static final String DELETE_LOCATOR_SQL = "DELETE FROM locator WHERE id = ?";    private static final String SORT_ASC = "SELECT * FROM locator ORDER BY x ASC, y ASC, z ASC";    private static final String SORT_DESC = "SELECT * FROM locator ORDER BY x DESC, y DESC, z DESC";    @Override    public void create(Locator locator) {        try {            Helper.executeUpdate(INSERT_LOCATOR_SQL,                    locator.getName(),                    locator.isActive(),                    locator.getX(),                    locator.getY(),                    locator.getZ(),                    locator.getCreatedBy(),                    locator.getWarehouseId()            );            System.out.println("Thêm locator thành công.");        } catch (Exception e) {            System.out.println("Thêm warehouse thất bại.");            e.printStackTrace();        }    }    @Override    public List<Locator> findAll() {        List<Locator> locators = new ArrayList<>();        try (Connection connection = Helper.getConnection();             PreparedStatement preparedStatement = connection.prepareStatement(SELECT_ALL_LOCATOR_SQL);             ResultSet rs = preparedStatement.executeQuery()) {            while (rs.next()) {                Locator locator = new Locator();                locator.setId(rs.getInt("id"));                locator.setName(rs.getString("name"));                locator.setActive(rs.getBoolean("is_active"));                locator.setX(rs.getInt("x"));                locator.setY(rs.getInt("y"));                locator.setZ(rs.getInt("z"));                locator.setCreated(rs.getTimestamp("created"));                locator.setCreatedBy(rs.getString("created_by"));                locator.setWarehouseId(rs.getInt("warehouse_id"));                locators.add(locator);            }        } catch (SQLException e) {            e.printStackTrace();        }        return locators;    }    @Override    public Optional<Locator> findById(int id) {        Locator locator = null;        try (Connection connection = Helper.getConnection();             PreparedStatement preparedStatement = connection.prepareStatement(SELECT_LOCATOR_BY_ID_SQL)) {            preparedStatement.setInt(1, id);            ResultSet rs = preparedStatement.executeQuery();            if (rs.next()) {                locator = new Locator();                locator.setId(rs.getInt("id"));                locator.setName(rs.getString("name"));                locator.setActive(rs.getBoolean("is_active"));                locator.setX(rs.getInt("x"));                locator.setY(rs.getInt("y"));                locator.setZ(rs.getInt("z"));                locator.setCreated(rs.getTimestamp("created"));                locator.setCreatedBy(rs.getString("created_by"));                locator.setWarehouseId(rs.getInt("warehouse_id"));            }        } catch (SQLException e) {            e.printStackTrace();        }        return Optional.ofNullable(locator);    }    public List<Locator> findByName(String name) {        List<Locator> list = new ArrayList();        try {            ResultSet rs = Helper.executeQuery(SELECT_LOCATOR_BY_NAME_SQL, name);            while (rs.next()) {                Locator locator = new Locator();                locator.setId(rs.getInt("id"));                locator.setName(rs.getString("name"));                locator.setActive(rs.getBoolean("is_active"));                locator.setX(rs.getInt("x"));                locator.setY(rs.getInt("y"));                locator.setZ(rs.getInt("z"));                locator.setCreated(rs.getTimestamp("created"));                locator.setCreatedBy(rs.getString("created_by"));                locator.setWarehouseId(rs.getInt("warehouse_id"));                list.add(locator);            }        } catch (Exception e) {            e.printStackTrace();        }        return list;    }    @Override    public void update(Locator locator) {        try {            Helper.executeUpdate(UPDATE_LOCATOR_SQL,                    locator.getName(),                    locator.isActive(),                    locator.getX(),                    locator.getY(),                    locator.getZ(),                    locator.getCreatedBy(),                    locator.getCreated(),                    locator.getWarehouseId(),                    locator.getId()            );            System.out.println("Cập nhật Locator thành công.");        } catch (Exception e) {            System.out.println("Cập nhật Locator thất bại.");            e.printStackTrace();        }    }    @Override    public void delete(int id) {        try (Connection connection = Helper.getConnection();             PreparedStatement preparedStatement = connection.prepareStatement(DELETE_LOCATOR_SQL)) {            preparedStatement.setInt(1, id);            preparedStatement.executeUpdate();        } catch (SQLException e) {            e.printStackTrace();        }    }    public List<Locator> sortListAsc() {        List<Locator> list = new ArrayList();        try {            ResultSet rs = Helper.executeQuery(SORT_ASC);            while (rs.next()) {                Locator locator = new Locator();                locator.setId(rs.getInt("id"));                locator.setName(rs.getString("name"));                locator.setActive(rs.getBoolean("is_active"));                locator.setX(rs.getInt("x"));                locator.setY(rs.getInt("y"));                locator.setZ(rs.getInt("z"));                locator.setCreated(rs.getTimestamp("created"));                locator.setCreatedBy(rs.getString("created_by"));                locator.setWarehouseId(rs.getInt("warehouse_id"));                list.add(locator);            }        } catch (Exception e) {            e.printStackTrace();        }        return list;    }    public List<Locator> sortListDesc() {        List<Locator> list = new ArrayList();        try {            ResultSet rs = Helper.executeQuery(SORT_DESC);            while (rs.next()) {                Locator locator = new Locator();                locator.setId(rs.getInt("id"));                locator.setName(rs.getString("name"));                locator.setActive(rs.getBoolean("is_active"));                locator.setX(rs.getInt("x"));                locator.setY(rs.getInt("y"));                locator.setZ(rs.getInt("z"));                locator.setCreated(rs.getTimestamp("created"));                locator.setCreatedBy(rs.getString("created_by"));                locator.setWarehouseId(rs.getInt("warehouse_id"));                list.add(locator);            }        } catch (Exception e) {            e.printStackTrace();        }        return list;    }}