package org.example.dao.daoImpl;import org.example.dao.CRUDOperations;import org.example.entity.Locator;import org.example.entity.Warehouse;import org.example.utils.Helper;import java.sql.*;import java.util.ArrayList;import java.util.List;import java.util.Optional;public class LocatorDAO implements CRUDOperations<Locator> {    private static final String SELECT_ALL_LOCATOR_SQL = "SELECT * FROM locator";    private static final String SELECT_LOCATOR_BY_ID_SQL = "SELECT * FROM locator WHERE id = ?";    private static final String SELECT_LOCATOR_BY_NAME_SQL = "SELECT * FROM locator WHERE name = ?";    private static final String INSERT_LOCATOR_SQL = "INSERT INTO locator (name, is_active, x, y, z, created, created_by, warehouse_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";    private static final String UPDATE_LOCATOR_SQL = "UPDATE locator SET name = ?, is_active = ?, x = ?, y = ?, z = ?, created = ?, created_by = ?, warehouse_id = ? WHERE id = ?";    private static final String DELETE_LOCATOR_SQL = "DELETE FROM locator WHERE id = ?";    @Override    public void create(Locator locator) {        try (Connection connection = Helper.getConnection();             PreparedStatement preparedStatement = connection.prepareStatement(INSERT_LOCATOR_SQL)) {            preparedStatement.setString(1, locator.getName());            preparedStatement.setBoolean(2, locator.isActive());            preparedStatement.setInt(3, locator.getX());            preparedStatement.setInt(4, locator.getY());            preparedStatement.setInt(5, locator.getZ());                preparedStatement.setTimestamp(6, (locator.getCreated()));            preparedStatement.setString(7, locator.getCreatedBy());//            preparedStatement.setInt(8, locator.getWarehouseId());            preparedStatement.executeUpdate();        } catch (SQLException e) {            e.printStackTrace();        }    }    @Override    public List<Locator> findAll() {        List<Locator> locators = new ArrayList<>();        try (Connection connection = Helper.getConnection();             PreparedStatement preparedStatement = connection.prepareStatement(SELECT_ALL_LOCATOR_SQL);             ResultSet rs = preparedStatement.executeQuery()) {            while (rs.next()) {                Locator locator = new Locator();                locator.setId(rs.getInt("id"));                locator.setName(rs.getString("name"));                locator.setActive(rs.getBoolean("is_active"));                locator.setX(rs.getInt("x"));                locator.setY(rs.getInt("y"));                locator.setZ(rs.getInt("z"));                locator.setCreated(rs.getTimestamp("created"));                locator.setCreatedBy(rs.getString("created_by"));//                // Fetch associated Warehouse//                Warehouse warehouse = new Warehouse();//                warehouse.setId(rs.getInt("warehouse_id"));//                locator.setWarehouse(warehouse);                locators.add(locator);            }        } catch (SQLException e) {            e.printStackTrace();        }        return locators;    }    @Override    public Optional<Locator> findById(int id) {        Locator locator = null;        try (Connection connection = Helper.getConnection();             PreparedStatement preparedStatement = connection.prepareStatement(SELECT_LOCATOR_BY_ID_SQL)) {            preparedStatement.setInt(1, id);            ResultSet rs = preparedStatement.executeQuery();            if (rs.next()) {                locator = new Locator();                locator.setId(rs.getInt("id"));                locator.setName(rs.getString("name"));                locator.setActive(rs.getBoolean("is_active"));                locator.setX(rs.getInt("x"));                locator.setY(rs.getInt("y"));                locator.setZ(rs.getInt("z"));                locator.setCreated(rs.getTimestamp("created"));                locator.setCreatedBy(rs.getString("created_by"));//                Warehouse warehouse = new Warehouse();//                warehouse.setId(rs.getInt("warehouse_id"));//                locator.setWarehouse(warehouse);            }        } catch (SQLException e) {            e.printStackTrace();        }        return Optional.ofNullable(locator);    }    @Override    public List<Locator> findByName(String name) {        return List.of();    }    @Override    public Optional<Locator> findByNameOnly(String name) {        Locator locator = null;        try (Connection connection = Helper.getConnection();             PreparedStatement preparedStatement = connection.prepareStatement(SELECT_LOCATOR_BY_NAME_SQL)) {            preparedStatement.setString(1, name);            ResultSet rs = preparedStatement.executeQuery();            if (rs.next()) {                locator = new Locator();                locator.setId(rs.getInt("id"));                locator.setName(rs.getString("name"));                locator.setActive(rs.getBoolean("is_active"));                locator.setX(rs.getInt("x"));                locator.setY(rs.getInt("y"));                locator.setZ(rs.getInt("z"));                locator.setCreated(rs.getTimestamp("created"));                locator.setCreatedBy(rs.getString("created_by"));//                Warehouse warehouse = new Warehouse();//                warehouse.setId(rs.getInt("warehouse_id"));//                locator.setWarehouse(warehouse);            }        } catch (SQLException e) {            e.printStackTrace();        }        return Optional.ofNullable(locator);    }    @Override    public void update(Locator locator) {        try (Connection connection = Helper.getConnection();             PreparedStatement preparedStatement = connection.prepareStatement(UPDATE_LOCATOR_SQL)) {            preparedStatement.setString(1, locator.getName());            preparedStatement.setBoolean(2, locator.isActive());            preparedStatement.setInt(3, locator.getX());            preparedStatement.setInt(4, locator.getY());            preparedStatement.setInt(5, locator.getZ());            preparedStatement.setTimestamp(6, locator.getCreated());            preparedStatement.setString(7, locator.getCreatedBy());//            preparedStatement.setInt(8, locator.getWarehouse());            preparedStatement.setInt(9, locator.getId());            preparedStatement.executeUpdate();        } catch (SQLException e) {            e.printStackTrace();        }    }    @Override    public void delete(int id) {        try (Connection connection = Helper.getConnection();             PreparedStatement preparedStatement = connection.prepareStatement(DELETE_LOCATOR_SQL)) {            preparedStatement.setInt(1, id);            preparedStatement.executeUpdate();        } catch (SQLException e) {            e.printStackTrace();        }    }}