package org.example.dao.daoImpl;import org.example.dao.CRUD;import org.example.entity.ProductCombo;import org.example.entity.ProductCombo;import org.example.utils.Helper;import org.example.utils.ProductType;import java.sql.ResultSet;import java.util.ArrayList;import java.util.List;import java.util.Optional;public class ProductComboDAO implements CRUD<ProductCombo> {    private static final String SELECT_ALL_PRODUCT_COMBO = "SELECT * FROM product WHERE product_type = ?";    private static final String INSERT_PRODUCT_COMBO = "INSERT INTO product (name, is_active, locator_id, create_by, qty_stock, " +            "product_type, product_parent_id) VALUES (?, ?, ?, ?, ?, ?, ?)";    private static final String UPDATE_PRODUCT_COMBO = "UPDATE product SET name = ?, is_active = ?, locator_id = ?, created = ?, " +            "create_by = ?, qty_stock = ?, product_parent_id = ? WHERE id = ?";    private static final String DELETE_PRODUCT_COMBO = "DELETE FROM product WHERE id = ? AND product_type = ?";    private static final String SELECT_BY_ID = "SELECT * FROM product WHERE id = ?";    private static final String SELECT_PRODUCT_COMBO_BY_ID = "SELECT * FROM product WHERE product_parent_id = ?";    private static final String SELECT_PRODUCTS_COMBO_ASC = "SELECT * FROM product WHERE product_type = ? ORDER BY qty_stock ASC";    private static final String SELECT_PRODUCTS_COMBO_DESC = "SELECT * FROM product WHERE product_type = ? ORDER BY qty_stock DESC";    @Override    public void create(ProductCombo productCombo) {        try {            Helper.executeUpdate(INSERT_PRODUCT_COMBO,                    productCombo.getName(),                    productCombo.getActive(),                    productCombo.getLocatorId(),                    productCombo.getCreatedBy(),                    productCombo.getQtyStock(),                    productCombo.getProductType().name(),                    productCombo.getProductParentId()            );            System.out.println("Thêm sản phẩm loại COMBO thành công");        } catch (Exception e) {            System.out.println("Thêm sản phẩm loại COMBO thất bại");            e.printStackTrace();        }    }    @Override    public List<ProductCombo> findAll() {        List<ProductCombo> list = new ArrayList<>();        try {            ResultSet rs = Helper.executeQuery(SELECT_ALL_PRODUCT_COMBO,                    ProductType.COMBO.toString());            while (rs.next()) {                ProductCombo productCombo = new ProductCombo();                productCombo.setId(rs.getInt("id"));                productCombo.setName(rs.getString("name"));                productCombo.setActive(rs.getBoolean("is_active"));                productCombo.setLocatorId(rs.getInt("locator_id"));                productCombo.setCreated(rs.getTimestamp("created"));                productCombo.setCreatedBy(rs.getString("created_by"));                productCombo.setQtyStock(rs.getInt("qty_stock"));                productCombo.setProductParentId(rs.getInt("product_parent_id"));                list.add(productCombo);            }        } catch (Exception e) {            e.printStackTrace();        }        return list;    }    @Override    public Optional<ProductCombo> findById(int id) {        ProductCombo combo = null;        try {            ResultSet rs = Helper.executeQuery(SELECT_BY_ID, id);            if (rs.next()) {                combo = new ProductCombo();                combo.setId(rs.getInt("id"));                combo.setName(rs.getString("name"));                combo.setActive(rs.getBoolean("is_active"));                combo.setLocatorId(rs.getInt("locator_id"));                combo.setCreated(rs.getTimestamp("created"));                combo.setQtyStock(rs.getInt("qty_stock"));                combo.setProductType(ProductType.valueOf(rs.getString("product_type")));                combo.setProductParentId(rs.getInt("product_parent_id"));            }        } catch (Exception e) {            e.printStackTrace();        }        return Optional.ofNullable(combo);    }    public List<ProductCombo> getComboById(int id) {        List<ProductCombo> list = new ArrayList<>();        try {            ResultSet rs = Helper.executeQuery(SELECT_PRODUCT_COMBO_BY_ID, id);            while (rs.next()) {                ProductCombo combo = new ProductCombo();                combo.setId(rs.getInt("id"));                combo.setName(rs.getString("name"));                combo.setActive(rs.getBoolean("is_active"));                combo.setLocatorId(rs.getInt("locator_id"));                combo.setCreated(rs.getTimestamp("created"));                combo.setQtyStock(rs.getInt("qty_stock"));                combo.setProductType(ProductType.valueOf(rs.getString("product_type")));                combo.setProductParentId(rs.getInt("product_parent_id"));                list.add(combo);            }        } catch (Exception e) {            e.printStackTrace();        }        return list;    }    @Override    public void update(ProductCombo productCombo) {        try {            Helper.executeUpdate(UPDATE_PRODUCT_COMBO,                    productCombo.getName(),                    productCombo.getActive(),                    productCombo.getLocatorId(),                    productCombo.getCreated(),                    productCombo.getCreatedBy(),                    productCombo.getQtyStock(),                    productCombo.getProductParentId(),                    productCombo.getId(),                    productCombo.getProductType().name()            );            System.out.println("Cập nhật sản phẩm loại COMBO thành công");        } catch (Exception e) {            System.out.println("Cập nhật sản phẩm loại COMBO thất bại");            e.printStackTrace();        }    }    @Override    public void delete(int id) {        try {            Optional<ProductCombo> optionalCombo = findById(id);            if (optionalCombo.isPresent()) {                ProductCombo combo = optionalCombo.get();                if (combo.getProductType() == ProductType.ITEM) {                    System.out.println("Không thể xóa sản phẩm loại ITEM: " + id);                    return;                }                Helper.executeUpdate(DELETE_PRODUCT_COMBO, id);                System.out.println("Xóa sản phẩm thành công: " + id);            } else {                System.out.println("Không tìm thấy ID sản phẩm: " + id);            }        } catch (Exception e) {            System.out.println("Xóa sản phẩm thất bại");            e.printStackTrace();        }    }    public List<ProductCombo> getComboSortAsc() {        List<ProductCombo> list = new ArrayList<>();        try {            ResultSet rs = Helper.executeQuery(SELECT_PRODUCTS_COMBO_ASC,                    ProductType.COMBO.toString()            );            while (rs.next()) {                ProductCombo combo = new ProductCombo();                combo.setId(rs.getInt("id"));                combo.setName(rs.getString("name"));                combo.setActive(rs.getBoolean("is_active"));                combo.setLocatorId(rs.getInt("locator_id"));                combo.setCreated(rs.getTimestamp("created"));                combo.setQtyStock(rs.getInt("qty_stock"));                combo.setProductType(ProductType.valueOf(rs.getString("product_type")));                combo.setProductParentId(rs.getInt("product_parent_id"));                list.add(combo);            }        } catch (Exception e) {            e.printStackTrace();        }        return list;    }    public List<ProductCombo> getComboSortDesc() {        List<ProductCombo> list = new ArrayList<>();        try {            ResultSet rs = Helper.executeQuery(SELECT_PRODUCTS_COMBO_DESC,                    ProductType.COMBO.toString()            );            while (rs.next()) {                ProductCombo combo = new ProductCombo();                combo.setId(rs.getInt("id"));                combo.setName(rs.getString("name"));                combo.setActive(rs.getBoolean("is_active"));                combo.setLocatorId(rs.getInt("locator_id"));                combo.setCreated(rs.getTimestamp("created"));                combo.setQtyStock(rs.getInt("qty_stock"));                combo.setProductType(ProductType.valueOf(rs.getString("product_type")));                combo.setProductParentId(rs.getInt("product_parent_id"));                list.add(combo);            }        } catch (Exception e) {            e.printStackTrace();        }        return list;    }}